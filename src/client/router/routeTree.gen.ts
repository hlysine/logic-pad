/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './../routes/__root'
import { Route as AuthImport } from './../routes/auth'
import { Route as IndexImport } from './../routes/index'
import { Route as OauthCallbackImport } from './../routes/oauth.callback'
import { Route as ContextLayoutSolveImport } from './../routes/_context._layout.solve'
import { Route as ContextLayoutPerfectionImport } from './../routes/_context._layout.perfection'
import { Route as ContextLayoutCreateImport } from './../routes/_context._layout.create'
import { Route as ContextLayoutEditPuzzleIdImport } from './../routes/_context._layout.edit.$puzzleId'

// Create Virtual Routes

const ContextLazyImport = createFileRoute('/_context')()
const ContextLayoutLazyImport = createFileRoute('/_context/_layout')()

// Create/Update Routes

const ContextLazyRoute = ContextLazyImport.update({
  id: '/_context',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./../routes/_context.lazy').then((d) => d.Route))

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ContextLayoutLazyRoute = ContextLayoutLazyImport.update({
  id: '/_layout',
  getParentRoute: () => ContextLazyRoute,
} as any).lazy(() =>
  import('./../routes/_context._layout.lazy').then((d) => d.Route),
)

const OauthCallbackRoute = OauthCallbackImport.update({
  id: '/oauth/callback',
  path: '/oauth/callback',
  getParentRoute: () => rootRoute,
} as any)

const ContextLayoutSolveRoute = ContextLayoutSolveImport.update({
  id: '/solve',
  path: '/solve',
  getParentRoute: () => ContextLayoutLazyRoute,
} as any).lazy(() =>
  import('./../routes/_context._layout.solve.lazy').then((d) => d.Route),
)

const ContextLayoutPerfectionRoute = ContextLayoutPerfectionImport.update({
  id: '/perfection',
  path: '/perfection',
  getParentRoute: () => ContextLayoutLazyRoute,
} as any).lazy(() =>
  import('./../routes/_context._layout.perfection.lazy').then((d) => d.Route),
)

const ContextLayoutCreateRoute = ContextLayoutCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => ContextLayoutLazyRoute,
} as any).lazy(() =>
  import('./../routes/_context._layout.create.lazy').then((d) => d.Route),
)

const ContextLayoutEditPuzzleIdRoute = ContextLayoutEditPuzzleIdImport.update({
  id: '/edit/$puzzleId',
  path: '/edit/$puzzleId',
  getParentRoute: () => ContextLayoutLazyRoute,
} as any).lazy(() =>
  import('./../routes/_context._layout.edit.$puzzleId.lazy').then(
    (d) => d.Route,
  ),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_context': {
      id: '/_context'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ContextLazyImport
      parentRoute: typeof rootRoute
    }
    '/oauth/callback': {
      id: '/oauth/callback'
      path: '/oauth/callback'
      fullPath: '/oauth/callback'
      preLoaderRoute: typeof OauthCallbackImport
      parentRoute: typeof rootRoute
    }
    '/_context/_layout': {
      id: '/_context/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ContextLayoutLazyImport
      parentRoute: typeof ContextLazyImport
    }
    '/_context/_layout/create': {
      id: '/_context/_layout/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof ContextLayoutCreateImport
      parentRoute: typeof ContextLayoutLazyImport
    }
    '/_context/_layout/perfection': {
      id: '/_context/_layout/perfection'
      path: '/perfection'
      fullPath: '/perfection'
      preLoaderRoute: typeof ContextLayoutPerfectionImport
      parentRoute: typeof ContextLayoutLazyImport
    }
    '/_context/_layout/solve': {
      id: '/_context/_layout/solve'
      path: '/solve'
      fullPath: '/solve'
      preLoaderRoute: typeof ContextLayoutSolveImport
      parentRoute: typeof ContextLayoutLazyImport
    }
    '/_context/_layout/edit/$puzzleId': {
      id: '/_context/_layout/edit/$puzzleId'
      path: '/edit/$puzzleId'
      fullPath: '/edit/$puzzleId'
      preLoaderRoute: typeof ContextLayoutEditPuzzleIdImport
      parentRoute: typeof ContextLayoutLazyImport
    }
  }
}

// Create and export the route tree

interface ContextLayoutLazyRouteChildren {
  ContextLayoutCreateRoute: typeof ContextLayoutCreateRoute
  ContextLayoutPerfectionRoute: typeof ContextLayoutPerfectionRoute
  ContextLayoutSolveRoute: typeof ContextLayoutSolveRoute
  ContextLayoutEditPuzzleIdRoute: typeof ContextLayoutEditPuzzleIdRoute
}

const ContextLayoutLazyRouteChildren: ContextLayoutLazyRouteChildren = {
  ContextLayoutCreateRoute: ContextLayoutCreateRoute,
  ContextLayoutPerfectionRoute: ContextLayoutPerfectionRoute,
  ContextLayoutSolveRoute: ContextLayoutSolveRoute,
  ContextLayoutEditPuzzleIdRoute: ContextLayoutEditPuzzleIdRoute,
}

const ContextLayoutLazyRouteWithChildren =
  ContextLayoutLazyRoute._addFileChildren(ContextLayoutLazyRouteChildren)

interface ContextLazyRouteChildren {
  ContextLayoutLazyRoute: typeof ContextLayoutLazyRouteWithChildren
}

const ContextLazyRouteChildren: ContextLazyRouteChildren = {
  ContextLayoutLazyRoute: ContextLayoutLazyRouteWithChildren,
}

const ContextLazyRouteWithChildren = ContextLazyRoute._addFileChildren(
  ContextLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '': typeof ContextLayoutLazyRouteWithChildren
  '/oauth/callback': typeof OauthCallbackRoute
  '/create': typeof ContextLayoutCreateRoute
  '/perfection': typeof ContextLayoutPerfectionRoute
  '/solve': typeof ContextLayoutSolveRoute
  '/edit/$puzzleId': typeof ContextLayoutEditPuzzleIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '': typeof ContextLayoutLazyRouteWithChildren
  '/oauth/callback': typeof OauthCallbackRoute
  '/create': typeof ContextLayoutCreateRoute
  '/perfection': typeof ContextLayoutPerfectionRoute
  '/solve': typeof ContextLayoutSolveRoute
  '/edit/$puzzleId': typeof ContextLayoutEditPuzzleIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/_context': typeof ContextLazyRouteWithChildren
  '/oauth/callback': typeof OauthCallbackRoute
  '/_context/_layout': typeof ContextLayoutLazyRouteWithChildren
  '/_context/_layout/create': typeof ContextLayoutCreateRoute
  '/_context/_layout/perfection': typeof ContextLayoutPerfectionRoute
  '/_context/_layout/solve': typeof ContextLayoutSolveRoute
  '/_context/_layout/edit/$puzzleId': typeof ContextLayoutEditPuzzleIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | ''
    | '/oauth/callback'
    | '/create'
    | '/perfection'
    | '/solve'
    | '/edit/$puzzleId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | ''
    | '/oauth/callback'
    | '/create'
    | '/perfection'
    | '/solve'
    | '/edit/$puzzleId'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/_context'
    | '/oauth/callback'
    | '/_context/_layout'
    | '/_context/_layout/create'
    | '/_context/_layout/perfection'
    | '/_context/_layout/solve'
    | '/_context/_layout/edit/$puzzleId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  ContextLazyRoute: typeof ContextLazyRouteWithChildren
  OauthCallbackRoute: typeof OauthCallbackRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  ContextLazyRoute: ContextLazyRouteWithChildren,
  OauthCallbackRoute: OauthCallbackRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/_context",
        "/oauth/callback"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/_context": {
      "filePath": "_context.lazy.tsx",
      "children": [
        "/_context/_layout"
      ]
    },
    "/oauth/callback": {
      "filePath": "oauth.callback.tsx"
    },
    "/_context/_layout": {
      "filePath": "_context._layout.lazy.tsx",
      "parent": "/_context",
      "children": [
        "/_context/_layout/create",
        "/_context/_layout/perfection",
        "/_context/_layout/solve",
        "/_context/_layout/edit/$puzzleId"
      ]
    },
    "/_context/_layout/create": {
      "filePath": "_context._layout.create.tsx",
      "parent": "/_context/_layout"
    },
    "/_context/_layout/perfection": {
      "filePath": "_context._layout.perfection.tsx",
      "parent": "/_context/_layout"
    },
    "/_context/_layout/solve": {
      "filePath": "_context._layout.solve.tsx",
      "parent": "/_context/_layout"
    },
    "/_context/_layout/edit/$puzzleId": {
      "filePath": "_context._layout.edit.$puzzleId.tsx",
      "parent": "/_context/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
