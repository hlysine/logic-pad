/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './../routes/__root'
import { Route as AuthRouteImport } from './../routes/auth'
import { Route as IndexRouteImport } from './../routes/index'
import { Route as OauthCallbackRouteImport } from './../routes/oauth.callback'
import { Route as LayoutSettingsRouteImport } from './../routes/_layout.settings'
import { Route as LayoutSearchRouteImport } from './../routes/_layout.search'
import { Route as LayoutMyStuffRouteImport } from './../routes/_layout.my-stuff'
import { Route as LayoutSolveIndexRouteImport } from './../routes/_layout.solve.index'
import { Route as LayoutPerfectionIndexRouteImport } from './../routes/_layout.perfection.index'
import { Route as LayoutCreateIndexRouteImport } from './../routes/_layout.create.index'
import { Route as LayoutSolvePuzzleIdRouteImport } from './../routes/_layout.solve.$puzzleId'
import { Route as LayoutPerfectionPuzzleIdRouteImport } from './../routes/_layout.perfection.$puzzleId'
import { Route as LayoutCreatePuzzleIdRouteImport } from './../routes/_layout.create.$puzzleId'

const LayoutLazyRouteImport = createFileRoute('/_layout')()

const LayoutLazyRoute = LayoutLazyRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./../routes/_layout.lazy').then((d) => d.Route))
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OauthCallbackRoute = OauthCallbackRouteImport.update({
  id: '/oauth/callback',
  path: '/oauth/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutSettingsRoute = LayoutSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutLazyRoute,
} as any).lazy(() =>
  import('./../routes/_layout.settings.lazy').then((d) => d.Route),
)
const LayoutSearchRoute = LayoutSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => LayoutLazyRoute,
} as any).lazy(() =>
  import('./../routes/_layout.search.lazy').then((d) => d.Route),
)
const LayoutMyStuffRoute = LayoutMyStuffRouteImport.update({
  id: '/my-stuff',
  path: '/my-stuff',
  getParentRoute: () => LayoutLazyRoute,
} as any).lazy(() =>
  import('./../routes/_layout.my-stuff.lazy').then((d) => d.Route),
)
const LayoutSolveIndexRoute = LayoutSolveIndexRouteImport.update({
  id: '/solve/',
  path: '/solve/',
  getParentRoute: () => LayoutLazyRoute,
} as any).lazy(() =>
  import('./../routes/_layout.solve.index.lazy').then((d) => d.Route),
)
const LayoutPerfectionIndexRoute = LayoutPerfectionIndexRouteImport.update({
  id: '/perfection/',
  path: '/perfection/',
  getParentRoute: () => LayoutLazyRoute,
} as any).lazy(() =>
  import('./../routes/_layout.perfection.index.lazy').then((d) => d.Route),
)
const LayoutCreateIndexRoute = LayoutCreateIndexRouteImport.update({
  id: '/create/',
  path: '/create/',
  getParentRoute: () => LayoutLazyRoute,
} as any).lazy(() =>
  import('./../routes/_layout.create.index.lazy').then((d) => d.Route),
)
const LayoutSolvePuzzleIdRoute = LayoutSolvePuzzleIdRouteImport.update({
  id: '/solve/$puzzleId',
  path: '/solve/$puzzleId',
  getParentRoute: () => LayoutLazyRoute,
} as any).lazy(() =>
  import('./../routes/_layout.solve.$puzzleId.lazy').then((d) => d.Route),
)
const LayoutPerfectionPuzzleIdRoute =
  LayoutPerfectionPuzzleIdRouteImport.update({
    id: '/perfection/$puzzleId',
    path: '/perfection/$puzzleId',
    getParentRoute: () => LayoutLazyRoute,
  } as any).lazy(() =>
    import('./../routes/_layout.perfection.$puzzleId.lazy').then(
      (d) => d.Route,
    ),
  )
const LayoutCreatePuzzleIdRoute = LayoutCreatePuzzleIdRouteImport.update({
  id: '/create/$puzzleId',
  path: '/create/$puzzleId',
  getParentRoute: () => LayoutLazyRoute,
} as any).lazy(() =>
  import('./../routes/_layout.create.$puzzleId.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/my-stuff': typeof LayoutMyStuffRoute
  '/search': typeof LayoutSearchRoute
  '/settings': typeof LayoutSettingsRoute
  '/oauth/callback': typeof OauthCallbackRoute
  '/create/$puzzleId': typeof LayoutCreatePuzzleIdRoute
  '/perfection/$puzzleId': typeof LayoutPerfectionPuzzleIdRoute
  '/solve/$puzzleId': typeof LayoutSolvePuzzleIdRoute
  '/create': typeof LayoutCreateIndexRoute
  '/perfection': typeof LayoutPerfectionIndexRoute
  '/solve': typeof LayoutSolveIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/my-stuff': typeof LayoutMyStuffRoute
  '/search': typeof LayoutSearchRoute
  '/settings': typeof LayoutSettingsRoute
  '/oauth/callback': typeof OauthCallbackRoute
  '/create/$puzzleId': typeof LayoutCreatePuzzleIdRoute
  '/perfection/$puzzleId': typeof LayoutPerfectionPuzzleIdRoute
  '/solve/$puzzleId': typeof LayoutSolvePuzzleIdRoute
  '/create': typeof LayoutCreateIndexRoute
  '/perfection': typeof LayoutPerfectionIndexRoute
  '/solve': typeof LayoutSolveIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/_layout': typeof LayoutLazyRouteWithChildren
  '/_layout/my-stuff': typeof LayoutMyStuffRoute
  '/_layout/search': typeof LayoutSearchRoute
  '/_layout/settings': typeof LayoutSettingsRoute
  '/oauth/callback': typeof OauthCallbackRoute
  '/_layout/create/$puzzleId': typeof LayoutCreatePuzzleIdRoute
  '/_layout/perfection/$puzzleId': typeof LayoutPerfectionPuzzleIdRoute
  '/_layout/solve/$puzzleId': typeof LayoutSolvePuzzleIdRoute
  '/_layout/create/': typeof LayoutCreateIndexRoute
  '/_layout/perfection/': typeof LayoutPerfectionIndexRoute
  '/_layout/solve/': typeof LayoutSolveIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/my-stuff'
    | '/search'
    | '/settings'
    | '/oauth/callback'
    | '/create/$puzzleId'
    | '/perfection/$puzzleId'
    | '/solve/$puzzleId'
    | '/create'
    | '/perfection'
    | '/solve'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/my-stuff'
    | '/search'
    | '/settings'
    | '/oauth/callback'
    | '/create/$puzzleId'
    | '/perfection/$puzzleId'
    | '/solve/$puzzleId'
    | '/create'
    | '/perfection'
    | '/solve'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/_layout'
    | '/_layout/my-stuff'
    | '/_layout/search'
    | '/_layout/settings'
    | '/oauth/callback'
    | '/_layout/create/$puzzleId'
    | '/_layout/perfection/$puzzleId'
    | '/_layout/solve/$puzzleId'
    | '/_layout/create/'
    | '/_layout/perfection/'
    | '/_layout/solve/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  LayoutLazyRoute: typeof LayoutLazyRouteWithChildren
  OauthCallbackRoute: typeof OauthCallbackRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/oauth/callback': {
      id: '/oauth/callback'
      path: '/oauth/callback'
      fullPath: '/oauth/callback'
      preLoaderRoute: typeof OauthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsRouteImport
      parentRoute: typeof LayoutLazyRoute
    }
    '/_layout/search': {
      id: '/_layout/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof LayoutSearchRouteImport
      parentRoute: typeof LayoutLazyRoute
    }
    '/_layout/my-stuff': {
      id: '/_layout/my-stuff'
      path: '/my-stuff'
      fullPath: '/my-stuff'
      preLoaderRoute: typeof LayoutMyStuffRouteImport
      parentRoute: typeof LayoutLazyRoute
    }
    '/_layout/solve/': {
      id: '/_layout/solve/'
      path: '/solve'
      fullPath: '/solve'
      preLoaderRoute: typeof LayoutSolveIndexRouteImport
      parentRoute: typeof LayoutLazyRoute
    }
    '/_layout/perfection/': {
      id: '/_layout/perfection/'
      path: '/perfection'
      fullPath: '/perfection'
      preLoaderRoute: typeof LayoutPerfectionIndexRouteImport
      parentRoute: typeof LayoutLazyRoute
    }
    '/_layout/create/': {
      id: '/_layout/create/'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof LayoutCreateIndexRouteImport
      parentRoute: typeof LayoutLazyRoute
    }
    '/_layout/solve/$puzzleId': {
      id: '/_layout/solve/$puzzleId'
      path: '/solve/$puzzleId'
      fullPath: '/solve/$puzzleId'
      preLoaderRoute: typeof LayoutSolvePuzzleIdRouteImport
      parentRoute: typeof LayoutLazyRoute
    }
    '/_layout/perfection/$puzzleId': {
      id: '/_layout/perfection/$puzzleId'
      path: '/perfection/$puzzleId'
      fullPath: '/perfection/$puzzleId'
      preLoaderRoute: typeof LayoutPerfectionPuzzleIdRouteImport
      parentRoute: typeof LayoutLazyRoute
    }
    '/_layout/create/$puzzleId': {
      id: '/_layout/create/$puzzleId'
      path: '/create/$puzzleId'
      fullPath: '/create/$puzzleId'
      preLoaderRoute: typeof LayoutCreatePuzzleIdRouteImport
      parentRoute: typeof LayoutLazyRoute
    }
  }
}

interface LayoutLazyRouteChildren {
  LayoutMyStuffRoute: typeof LayoutMyStuffRoute
  LayoutSearchRoute: typeof LayoutSearchRoute
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutCreatePuzzleIdRoute: typeof LayoutCreatePuzzleIdRoute
  LayoutPerfectionPuzzleIdRoute: typeof LayoutPerfectionPuzzleIdRoute
  LayoutSolvePuzzleIdRoute: typeof LayoutSolvePuzzleIdRoute
  LayoutCreateIndexRoute: typeof LayoutCreateIndexRoute
  LayoutPerfectionIndexRoute: typeof LayoutPerfectionIndexRoute
  LayoutSolveIndexRoute: typeof LayoutSolveIndexRoute
}

const LayoutLazyRouteChildren: LayoutLazyRouteChildren = {
  LayoutMyStuffRoute: LayoutMyStuffRoute,
  LayoutSearchRoute: LayoutSearchRoute,
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutCreatePuzzleIdRoute: LayoutCreatePuzzleIdRoute,
  LayoutPerfectionPuzzleIdRoute: LayoutPerfectionPuzzleIdRoute,
  LayoutSolvePuzzleIdRoute: LayoutSolvePuzzleIdRoute,
  LayoutCreateIndexRoute: LayoutCreateIndexRoute,
  LayoutPerfectionIndexRoute: LayoutPerfectionIndexRoute,
  LayoutSolveIndexRoute: LayoutSolveIndexRoute,
}

const LayoutLazyRouteWithChildren = LayoutLazyRoute._addFileChildren(
  LayoutLazyRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  LayoutLazyRoute: LayoutLazyRouteWithChildren,
  OauthCallbackRoute: OauthCallbackRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
